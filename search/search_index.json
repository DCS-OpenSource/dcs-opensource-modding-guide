{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DCS Modding Docs Welcome to the DCS OpenSource communities combined knowledge, this document is not meant to be a complete guide for making a mod. Instead, it serves as a lookup and reference for the many available functions DCS provides. This document will be evolving as new things get added, or discovered. Warning Not all functions have been tested, if you find any errors, please let the team know.","title":"Home"},{"location":"#dcs-modding-docs","text":"Welcome to the DCS OpenSource communities combined knowledge, this document is not meant to be a complete guide for making a mod. Instead, it serves as a lookup and reference for the many available functions DCS provides. This document will be evolving as new things get added, or discovered. Warning Not all functions have been tested, if you find any errors, please let the team know.","title":"DCS Modding Docs"},{"location":"Aircraft/Lua/LockOnOptions/","text":"LockOn_Options The LockOn_Options table provides several useful parameters and values. avionics_language String representation of avionics language Usage local lang = LockOn_Options.avionics_language cockpit Table containing cockpit-related options. Usage local cockpitOptions = LockOn_Options.cockpit cockpit_language String representation of the cockpit language. Usage local cockpitLang = LockOn_Options.cockpit_language common_ground_script_path String path to the CA (Combined Arms) cockpit scripts. Usage local caPath = LockOn_Options.common_ground_script_path common_script_path String path to the common cockpit scripts. Usage local commonPath = LockOn_Options.common_script_path date Table containing the current date (day, month, year). Usage local date = LockOn_Options.date -- date.day, date.month, date.year flight Table containing flight-related options. Usage local flightOptions = LockOn_Options.flight init_conditions Get the state of the spawn. Useful for configuring your aircraft depending on the initial state. In Air Hot: string | \"AIR_HOT\" On Ground Hot: string | \"GROUND_HOT\" Cold Start: Unknown (see usage) Usage local birth = LockOn_Options.init_conditions.birth_place if birth == \"GROUND_HOT\" or birth == \"AIR_HOT\" then -- hot start init else -- cold start init end measurement_system String indicating the measurement system in use. Usage local system = LockOn_Options.measurement_system mission Table containing mission-related options. Usage local mission = LockOn_Options.mission screen Table containing screen parameters (aspect, height, width). Usage local screen = LockOn_Options.screen -- screen.aspect, screen.height, screen.width script_path String path to the cockpit scripts. Usage local scriptPath = LockOn_Options.script_path time Table containing the current time (hours, minutes, seconds). Usage local time = LockOn_Options.time -- time.hours, time.minutes, time.seconds","title":"LockOn_Options"},{"location":"Aircraft/Lua/LockOnOptions/#lockon_options","text":"The LockOn_Options table provides several useful parameters and values.","title":"LockOn_Options"},{"location":"Aircraft/Lua/LockOnOptions/#avionics_language","text":"String representation of avionics language Usage local lang = LockOn_Options.avionics_language","title":"avionics_language"},{"location":"Aircraft/Lua/LockOnOptions/#cockpit","text":"Table containing cockpit-related options. Usage local cockpitOptions = LockOn_Options.cockpit","title":"cockpit"},{"location":"Aircraft/Lua/LockOnOptions/#cockpit_language","text":"String representation of the cockpit language. Usage local cockpitLang = LockOn_Options.cockpit_language","title":"cockpit_language"},{"location":"Aircraft/Lua/LockOnOptions/#common_ground_script_path","text":"String path to the CA (Combined Arms) cockpit scripts. Usage local caPath = LockOn_Options.common_ground_script_path","title":"common_ground_script_path"},{"location":"Aircraft/Lua/LockOnOptions/#common_script_path","text":"String path to the common cockpit scripts. Usage local commonPath = LockOn_Options.common_script_path","title":"common_script_path"},{"location":"Aircraft/Lua/LockOnOptions/#date","text":"Table containing the current date (day, month, year). Usage local date = LockOn_Options.date -- date.day, date.month, date.year","title":"date"},{"location":"Aircraft/Lua/LockOnOptions/#flight","text":"Table containing flight-related options. Usage local flightOptions = LockOn_Options.flight","title":"flight"},{"location":"Aircraft/Lua/LockOnOptions/#init_conditions","text":"Get the state of the spawn. Useful for configuring your aircraft depending on the initial state. In Air Hot: string | \"AIR_HOT\" On Ground Hot: string | \"GROUND_HOT\" Cold Start: Unknown (see usage) Usage local birth = LockOn_Options.init_conditions.birth_place if birth == \"GROUND_HOT\" or birth == \"AIR_HOT\" then -- hot start init else -- cold start init end","title":"init_conditions"},{"location":"Aircraft/Lua/LockOnOptions/#measurement_system","text":"String indicating the measurement system in use. Usage local system = LockOn_Options.measurement_system","title":"measurement_system"},{"location":"Aircraft/Lua/LockOnOptions/#mission","text":"Table containing mission-related options. Usage local mission = LockOn_Options.mission","title":"mission"},{"location":"Aircraft/Lua/LockOnOptions/#screen","text":"Table containing screen parameters (aspect, height, width). Usage local screen = LockOn_Options.screen -- screen.aspect, screen.height, screen.width","title":"screen"},{"location":"Aircraft/Lua/LockOnOptions/#script_path","text":"String path to the cockpit scripts. Usage local scriptPath = LockOn_Options.script_path","title":"script_path"},{"location":"Aircraft/Lua/LockOnOptions/#time","text":"Table containing the current time (hours, minutes, seconds). Usage local time = LockOn_Options.time -- time.hours, time.minutes, time.seconds","title":"time"},{"location":"Aircraft/Lua/Devices/avLuaDevice/","text":"avLuaDevice post_initialize() Called once when you load into your plane, very useful for setting hot/cold start variables. Note Any hot/cold start setup should be put in here. See LockOn_Options.init_conditions for more details. Usage function post_initalize() print_message_to_user(\"Welcome to your plane\") end update() Usage The update function runs once every update_time_step seconds. local update_time_step = 0.05 make_default_activity(update_time_step) -- sets the device to run every 0.05 seconds local timer = 0 function update() print_message_to_user(\"Timer: \" .. timer .. \" seconds\") timer = timer + update_time_step end SetCommand() TODO CockpitEvent() Usage The CockpitEvent function can be used to detect certain events happening in game, such as rearming and refueling, wheel chocks and more. Example usage can be seen below local dev = GetSelf() dev:listen_event(\"WheelChocksOn\") function CockpitEvent(event, val) if event == \"WheelChocksOn\" then print_message_to_user(\"Wheel Chocks Equipped\") end end Warning You must use dev:listen_event(eventName) to listen for your event Event List -- Sourced from a mixture of modding hub and the A-29B -- Rearm/Refuel events dev:listen_event(\"WeaponRearmComplete\") dev:listen_event(\"WeaponRearmFirstStep\") dev:listen_event(\"WeaponRearmSingleStepComplete\") dev:listen_event(\"ReloadDone\") dev:listen_event(\"RefuelDone\") dev:listen_event(\"Repair\") dev:listen_event(\"refuel\") dev:listen_event(\"refuelcomplete\") dev:listen_event(\"refueldone\") dev:listen_event(\"UnlimitedWeaponStationRestore\") dev:listen_event(\"initChaffFlarePayload\") -- Ground Power dev:listen_event(\"GroundPowerOn\") dev:listen_event(\"GroundPowerOff\") -- Ground Air dev:listen_event(\"GroundAirOff\") dev:listen_event(\"GroundAirOn\") dev:listen_event(\"GroundAirFailure\") dev:listen_event(\"GroundAirApplyOn\") dev:listen_event(\"GroundAirApplyOff\") dev:listen_event(\"GroundAirApplyFailure\") -- Wheel Chocks dev:listen_event(\"WheelChocksOn\") dev:listen_event(\"WheelChocksOff\") -- Misc Ground Crew dev:listen_event(\"CanopyOpen\") dev:listen_event(\"CanopyClose\") dev:listen_event(\"setup_HMS\") dev:listen_event(\"setup_NVG\") -- Works the same as release() function as shown in the example device dev:listen_event(\"cockpit_release\") -- Unknown dev:listen_event(\"DisableTurboGear\") dev:listen_event(\"EnableTurboGear\") dev:listen_event(\"switch_datalink\") dev:listen_event(\"LinkNOPtoNet\") dev:listen_event(\"UnlinkNOPfromNet\") dev:listen_event(\"EGI_TurnOff\") dev:listen_event(\"EGI_TurnOn\") dev:listen_event(\"RestoreEGIoperation\") dev:listen_event(\"TISLmodeChange\") dev:listen_event(\"OnNewNetPlane\") release() The release() function is useful if you need to clean something up that isnt reset by reloading. It is called by DCS when you: Die Reload Return to Menu Change slots Note There isn't really a use for this other than some niche cases, but its available if needed. 99% of the time simply reseting/reloading will be more than enough Usage function release() print_message_to_user(\"Cleanup\") end Example Device The below example is a bare bones lua device. This will serve as your primary method of creating systems in lua local update_time_step = 0.05 make_default_activity(update_time_step) -- sets the device to run every 0.05 seconds local dev = GetSelf() -- Get the current device object function post_initialize() -- Called once by DCS when you load into the cockpit print_message_to_user(\"Hello from basic device\") end function release() -- Called once by DCS when you die, unload or close the mission end function update() -- Called by DCS one every update_time_step seconds end function SetCommand(command, value) -- Listens for commands from Keybinds or clickables end function CockpitEvent(event,val) -- function called by DCS when event happens end need_to_be_closed = false -- close lua state after initialization Warning You are not able to parse data between different devices as they are seperate global contexts","title":"avLuaDevice"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#avluadevice","text":"","title":"avLuaDevice"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#post_initialize","text":"Called once when you load into your plane, very useful for setting hot/cold start variables. Note Any hot/cold start setup should be put in here. See LockOn_Options.init_conditions for more details.","title":"post_initialize()"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#usage","text":"function post_initalize() print_message_to_user(\"Welcome to your plane\") end","title":"Usage"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#update","text":"","title":"update()"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#usage_1","text":"The update function runs once every update_time_step seconds. local update_time_step = 0.05 make_default_activity(update_time_step) -- sets the device to run every 0.05 seconds local timer = 0 function update() print_message_to_user(\"Timer: \" .. timer .. \" seconds\") timer = timer + update_time_step end","title":"Usage"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#setcommand","text":"TODO","title":"SetCommand()"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#cockpitevent","text":"","title":"CockpitEvent()"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#usage_2","text":"The CockpitEvent function can be used to detect certain events happening in game, such as rearming and refueling, wheel chocks and more. Example usage can be seen below local dev = GetSelf() dev:listen_event(\"WheelChocksOn\") function CockpitEvent(event, val) if event == \"WheelChocksOn\" then print_message_to_user(\"Wheel Chocks Equipped\") end end Warning You must use dev:listen_event(eventName) to listen for your event","title":"Usage"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#event-list","text":"-- Sourced from a mixture of modding hub and the A-29B -- Rearm/Refuel events dev:listen_event(\"WeaponRearmComplete\") dev:listen_event(\"WeaponRearmFirstStep\") dev:listen_event(\"WeaponRearmSingleStepComplete\") dev:listen_event(\"ReloadDone\") dev:listen_event(\"RefuelDone\") dev:listen_event(\"Repair\") dev:listen_event(\"refuel\") dev:listen_event(\"refuelcomplete\") dev:listen_event(\"refueldone\") dev:listen_event(\"UnlimitedWeaponStationRestore\") dev:listen_event(\"initChaffFlarePayload\") -- Ground Power dev:listen_event(\"GroundPowerOn\") dev:listen_event(\"GroundPowerOff\") -- Ground Air dev:listen_event(\"GroundAirOff\") dev:listen_event(\"GroundAirOn\") dev:listen_event(\"GroundAirFailure\") dev:listen_event(\"GroundAirApplyOn\") dev:listen_event(\"GroundAirApplyOff\") dev:listen_event(\"GroundAirApplyFailure\") -- Wheel Chocks dev:listen_event(\"WheelChocksOn\") dev:listen_event(\"WheelChocksOff\") -- Misc Ground Crew dev:listen_event(\"CanopyOpen\") dev:listen_event(\"CanopyClose\") dev:listen_event(\"setup_HMS\") dev:listen_event(\"setup_NVG\") -- Works the same as release() function as shown in the example device dev:listen_event(\"cockpit_release\") -- Unknown dev:listen_event(\"DisableTurboGear\") dev:listen_event(\"EnableTurboGear\") dev:listen_event(\"switch_datalink\") dev:listen_event(\"LinkNOPtoNet\") dev:listen_event(\"UnlinkNOPfromNet\") dev:listen_event(\"EGI_TurnOff\") dev:listen_event(\"EGI_TurnOn\") dev:listen_event(\"RestoreEGIoperation\") dev:listen_event(\"TISLmodeChange\") dev:listen_event(\"OnNewNetPlane\")","title":"Event List"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#release","text":"The release() function is useful if you need to clean something up that isnt reset by reloading. It is called by DCS when you: Die Reload Return to Menu Change slots Note There isn't really a use for this other than some niche cases, but its available if needed. 99% of the time simply reseting/reloading will be more than enough","title":"release()"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#usage_3","text":"function release() print_message_to_user(\"Cleanup\") end","title":"Usage"},{"location":"Aircraft/Lua/Devices/avLuaDevice/#example-device","text":"The below example is a bare bones lua device. This will serve as your primary method of creating systems in lua local update_time_step = 0.05 make_default_activity(update_time_step) -- sets the device to run every 0.05 seconds local dev = GetSelf() -- Get the current device object function post_initialize() -- Called once by DCS when you load into the cockpit print_message_to_user(\"Hello from basic device\") end function release() -- Called once by DCS when you die, unload or close the mission end function update() -- Called by DCS one every update_time_step seconds end function SetCommand(command, value) -- Listens for commands from Keybinds or clickables end function CockpitEvent(event,val) -- function called by DCS when event happens end need_to_be_closed = false -- close lua state after initialization Warning You are not able to parse data between different devices as they are seperate global contexts","title":"Example Device"},{"location":"Aircraft/Lua/Devices/avSimpleWeaponSystem/","text":"","title":"avSimpleWeaponSystem"},{"location":"Aircraft/Lua/Modules/Terrain/","text":"Terrain Module Loading the module local Terrain = require(\"terrain\") Warning Non functional or untested functions will be tagged with [UNVERIFIED] TODO: Test functions and verify descriptions Method Params Description Create \u2014 Instantiate or reset the terrain subsystem. FindNearestPoint x, y, range Find the nearest valid point (e.g. on a road) to (x, y) within range . FindOptimalPath x1, y1, x2, y2 Compute the optimal path (e.g. along roads) from (x1, y1) to (x2, y2) . GetHeight x, y Return terrain elevation at (x, y) . GetMGRScoordinates x, y Return the MGRS grid coordinate for (x, y) . GetSeasons \u2014 Return a table of season identifiers or data. GetSurfaceHeightWithSeabed x, y Return both surface elevation and depth of sea bed at (x, y) . GetSurfaceType x, y Return the type of surface (e.g. \u201cwater\u201d, \u201casphalt\u201d) at (x, y) . GetTerrainConfig type Obtain configuration data for terrain subtypes (e.g. \u201cAirdromes\u201d). Init terrain_config, reason, date Initialize terrain data with a config table, reason code, and date. InitLight terrain_config, reason, date Initialize only the lighting component of the terrain system. Release \u2014 Clean up or unload terrain resources. convertLatLonToMeters lat, lon Convert geographic coordinates (latitude, longitude) into simulation meters. convertMGRStoMeters mgrs Convert an MGRS string into simulation meters. convertMetersToLatLon x, y Convert simulation\u2010space meters back to geographic coordinates. findPathOnRoads type, x1, y1, x2, y2 Find a path along \u201croads\u201d or \u201crailroads\u201d between two points. getBeacons \u2014 Retrieve a list of all beacon objects in the terrain. getClosestPointOnRoads type, x, y Find the nearest point on the specified network (\u201croads\u201d or \u201crailroads\u201d) to (x, y) . getClosestValidPoint type, x, y Find the nearest valid point of specified type (e.g. \u201cland\u201d) to (x, y) . getCrossParam \u2014 Retrieve cross\u2010parameter data (undocumented use case). getObjectPosition o Return the map position of a given scene object. getObjectsAtMapPoint mapX, mapY List all objects whose footprint overlaps the map point. getRadio roadnet Get radio frequencies for an airport identified by its road-network string. getRunwayHeading roadnet Return the magnetic heading of the primary runway for the given airport. getRunwayList roadnet Return runway metadata: course, edge names and coordinates. getStandList roadnet Return a list of aircraft stands with locations. getTechSkinByDate day, month Retrieve terrain \u201ctech skin\u201d (appearance) valid on the specified date. getTempratureRangeByDate day, month Return expected temperature range for the given day/month. getTerrainShpare \u2014 (Undocumented\u2014likely returns shape data for terrain meshes.) isVisible x1, alt1, y1, x2, alt2, y2 Raycast LOS check between two points at specified altitudes; returns true if unobstructed. Create Signature: Terrain.Create() Description: [UNVERIFIED] Instantiate or reset the terrain subsystem. Call this if you need to clear any existing terrain data before re-initializing or running a new mission. Example: -- Start with a fresh terrain state Terrain.Create() FindNearestPoint Signature: px, py = Terrain.FindNearestPoint(x, y, range) Parameters: - x, y (number): world coordinates from which to search. - range (number): maximum search radius in meters. Returns: - px, py (number): coordinates of the nearest valid point (e.g. on a road). Description: [UNVERIFIED] Searches outward up to range meters and returns the closest point on the specified network. Useful for snapping units to roads or paths. Example: local playerX, playerY = 50000, 75000 local roadX, roadY = Terrain.FindNearestPoint(playerX, playerY, 2000) print(\"Snap to road at:\", roadX, roadY) FindOptimalPath Signature: pathTable = Terrain.FindOptimalPath(x1, y1, x2, y2) Parameters: - x1, y1 (number): start coordinates. - x2, y2 (number): end coordinates. Returns: - pathTable (table): an array of { x = ..., y = ... } waypoints along the optimal route (e.g. following roads). Description: [UNVERIFIED] Runs a graph search (A or Dijkstra) over the terrain network to produce a drivable path. Example: * local route = Terrain.FindOptimalPath(10000, 20000, 30000, 40000) for i, pt in ipairs(route) do print(i, pt.x, pt.y) end GetHeight Signature: h = Terrain.GetHeight(x, y) Parameters: - x, y (number): query coordinates. Returns: - h (number): terrain elevation (meters above sea level). Description: Quickly sample the terrain elevation. Example: local elev = Terrain.GetHeight(45000, 82000) print(\"Elevation is\", elev, \"m\") GetMGRScoordinates Signature: mgrs = Terrain.GetMGRScoordinates(x, y) Parameters: - x, y (number): world coordinates. Returns: - mgrs (string): MGRS grid reference (e.g. \"34TDF1234567890\"). Description: Convert from simulation-space meters to a human-readable MGRS coordinate. Example: local gridRef = Terrain.GetMGRScoordinates(345000, 789000) print(\"Grid:\", gridRef) GetSeasons Signature: seasons = Terrain.GetSeasons() Returns: - seasons (table): list of available season identifiers (e.g. { \"winter\", \"summer\", ... }). Description: [UNVERIFIED] Fetch the set of seasons for which terrain textures and lighting are defined. Example: for _, season in ipairs(Terrain.GetSeasons()) do print(\"Available season:\", season) end GetSurfaceHeightWithSeabed Signature: surfaceH, depth = Terrain.GetSurfaceHeightWithSeabed(x, y) Parameters: - x, y (number): coordinates over water. Returns: - surfaceH (number): elevation of the water surface. - depth (number): depth from surface to seabed (positive number). Description: [UNVERIFIED] Useful for amphibious operations to know both water level and bottom depth. Example: local surf, d = Terrain.GetSurfaceHeightWithSeabed(20000, 15000) print(\"Water at\", surf, \"m, seabed\", d, \"m below\") GetSurfaceType Signature: stype = Terrain.GetSurfaceType(x, y) Parameters: - x, y (number): query location. Returns: - stype (string): surface material. \"land\" , \"sea\" , \"lake\" , \"river\" Description: Detect what kind of surface occupies a coordinate. Example: local mat = Terrain.GetSurfaceType(10200, 20500) print(\"Surface is\", mat) GetTerrainConfig Signature: cfg = Terrain.GetTerrainConfig(type) Parameters: - type (string): e.g. \"Airdromes\". Returns: - cfg (table): configuration block for that terrain element (bounds, default camera, etc.). Description: [UNVERIFIED] Inspect built-in metadata for things like airfield layout. Example: local airCfg = Terrain.GetTerrainConfig(\"Airdromes\") print(\"Airfield NE bound:\", airCfg.NE_bound.x, airCfg.NE_bound.y) Init Signature: Terrain.Init(terrain_config, reason, date) Parameters: - terrain_config (table) - reason (any) - date (table): { year=\u2026, month=\u2026, day=\u2026 }. Description: [UNVERIFIED] none. Example: local cfg = Terrain.GetTerrainConfig(\"Airdromes\") Terrain.Init(cfg, \"mission_start\", { year=2025, month=7, day=7 }) InitLight Signature: Terrain.InitLight(terrain_config, reason, date) Parameters: - terrain_config (table) - reason (any) - date (table): { year=\u2026, month=\u2026, day=\u2026 }. Description: [UNVERIFIED] none. Example: Terrain.InitLight(airCfg, \"time_change\", { year=2025, month=12, day=1 }) Release Signature: Terrain.Release() Description: [UNVERIFIED] none. Example: Terrain.Release() convertLatLonToMeters Signature: x, y = Terrain.convertLatLonToMeters(lat, lon) Parameters: - lat, lon (number): geographic coordinates in degrees. Returns: - x, y (number): simulation meters. Description: Project WGS84 lat/lon into the simulator\u2019s local flat coordinate system. Example: local mx, my = Terrain.convertLatLonToMeters(34.0522, -118.2437) convertMGRStoMeters Signature: x, y = Terrain.convertMGRStoMeters(mgrs) Parameters: - mgrs (string): MGRS reference. Returns: - x, y (number): simulation meters. Description: Inverse of GetMGRScoordinates. Example: local ux, uy = Terrain.convertMGRStoMeters(\"33TUN1234567890\") convertMetersToLatLon Signature: lat, lon = Terrain.convertMetersToLatLon(x, y) Parameters: - x, y (number): simulation coordinates. Returns: - lat, lon (number): geographic degrees. Description: Inverse map projection back to WGS84. Example: local \u03c6, \u03bb = Terrain.convertMetersToLatLon(400000, 5000000) findPathOnRoads Signature: pathTable = Terrain.findPathOnRoads(type, x1, y1, x2, y2) Parameters: - type (string): \"roads\" or \"railroads\". - x1, y1 , x2, y2 (number): endpoints. Returns: - pathTable (table): waypoint array. Description: [UNVERIFIED] none. Example: local trainRoute = Terrain.findPathOnRoads(\"railroads\", 1000, 2000, 8000, 9000) getBeacons Signature: beacons = Terrain.getBeacons() Returns: - beacons (table): list of beacon objects, each with position and frequency. Description: Enumerate nav-beacons placed in the terrain. Example: for _, b in ipairs(Terrain.getBeacons()) do print(\"Beacon\", b.id, \"at\", b.x, b.y, \"freq\", b.freq) end getClosestPointOnRoads Signature: px, py = Terrain.getClosestPointOnRoads(type, x, y) Parameters: - type (string): \"roads\" or \"railroads\". - x, y (number): query point. Returns: - px, py (number): on-network coordinates. Description: [UNVERIFIED] none. Example: local rx, ry = Terrain.getClosestPointOnRoads(\"roads\", 12345, 67890) getClosestValidPoint Signature: px, py = Terrain.getClosestValidPoint(type, x, y) Parameters: - type (string): e.g. \"land\". - x, y (number): input coords. Returns: - px, py (number): nearest valid location of that type. Description: [UNVERIFIED] none. Example: local fx, fy = Terrain.getClosestValidPoint(\"land\", helicopterX, helicopterY) getCrossParam Signature: param = Terrain.getCrossParam() Returns: - param (any): undocumented cross-parameter data. Description: Only for advanced use\u2014internal terrain tuning. Example: local cp = Terrain.getCrossParam() print(\"Cross param:\", cp) getObjectPosition Signature: ox, oy = Terrain.getObjectPosition(obj) Parameters: - obj (Object): engine object reference. Returns: - ox, oy (number): its map position. Description: [UNVERIFIED] none. Example: local x, y = Terrain.getObjectPosition(myVehicle) getObjectsAtMapPoint Signature: list = Terrain.getObjectsAtMapPoint(mapX, mapY) Parameters: - mapX, mapY (number): query location. Returns: - list (table): all objects overlapping that point. Description: [UNVERIFIED] none. Example: local objs = Terrain.getObjectsAtMapPoint(5000, 6000) print(\"Found\", #objs, \"objects\") getRadio Signature: radios = Terrain.getRadio(roadnet) Parameters: - roadnet (string): airport identifier. Returns: - radios (table): frequency settings for that airfield\u2019s comms. Description: Obtain tower/ground/approach frequencies. Example: local freqs = Terrain.getRadio(\"KSFO_roadnet\") print(freqs.tower, freqs.ground) getRunwayHeading Signature: hdg = Terrain.getRunwayHeading(roadnet) Parameters: - roadnet (string): airport ID. Returns: - hdg (number): magnetic heading of the primary runway. Description: Useful for HUD wind-correction and runway-alignment cues. Example: local rHdg = Terrain.getRunwayHeading(\"RJTT_roadnet\") print(\"Runway heading:\", rHdg) getRunwayList Signature: runways = Terrain.getRunwayList(roadnet) Parameters: - roadnet (string): airport ID. Returns: - runways (table): each entry contains: - course (number): runway heading - edge1name (string), edge1x , edge1y (number): name and coordinates of one end - edge2name (string), edge2x , edge2y (number): name and coordinates of the opposite end Description: Enumerate all runways at the specified airfield, returning their endpoints and headings. Example: for _, rw in ipairs(Terrain.getRunwayList(\"EGLL_roadnet\")) do print(\"RW\", rw.edge1name, \"to\", rw.edge2name, \"heading\", rw.course) end getStandList Signature: stands = Terrain.getStandList(roadnet) Parameters: - roadnet (string): airport ID. Returns: - stands (table): list of parking stands with coordinates. Description: Get gate and parking-spot positions. Example: local gates = Terrain.getStandList(\"KDEN_roadnet\") print(\"First stand at\", gates[1].x, gates[1].y) getTechSkinByDate Signature: skin = Terrain.getTechSkinByDate(day, month) Parameters: - day, month (number): calendar date. Returns: - skin (any): texture/skin identifier valid on that day. Description: Swap in historical or seasonal terrain skins. Example: local tex = Terrain.getTechSkinByDate(15, 8) -- August 15 getTempratureRangeByDate Signature: minT, maxT = Terrain.getTempratureRangeByDate(day, month) Parameters: - day, month (number): date. Returns: - minT, maxT (number): expected daily temperature extremes (\u00b0C). Description: Drive weather models or engine performance tables. Example: local lo, hi = Terrain.getTempratureRangeByDate(1, 12) print(\"Dec 1 temps:\", lo, \"to\", hi) getTerrainShpare Signature: shape = Terrain.getTerrainShpare() Returns: - shape (any): internal terrain mesh data. Description: Undocumented; likely used for low-level mesh queries. Example: local mesh = Terrain.getTerrainShpare() isVisible Signature: visible = Terrain.isVisible(x1, alt1, y1, x2, alt2, y2) Parameters: - x1, y1, alt1 (number): start point and altitude. - x2, y2, alt2 (number): end point and altitude. Returns: - visible (boolean): true if line-of-sight is unobstructed. Description: Perform a raycast through the terrain to check LOS. Example: if Terrain.isVisible(10000, 50, 20000, 15000, 100, 25000) then print(\"Target in sight!\") end","title":"Terrain"},{"location":"Aircraft/Lua/Modules/Terrain/#terrain-module","text":"","title":"Terrain Module"},{"location":"Aircraft/Lua/Modules/Terrain/#loading-the-module","text":"local Terrain = require(\"terrain\") Warning Non functional or untested functions will be tagged with [UNVERIFIED] TODO: Test functions and verify descriptions Method Params Description Create \u2014 Instantiate or reset the terrain subsystem. FindNearestPoint x, y, range Find the nearest valid point (e.g. on a road) to (x, y) within range . FindOptimalPath x1, y1, x2, y2 Compute the optimal path (e.g. along roads) from (x1, y1) to (x2, y2) . GetHeight x, y Return terrain elevation at (x, y) . GetMGRScoordinates x, y Return the MGRS grid coordinate for (x, y) . GetSeasons \u2014 Return a table of season identifiers or data. GetSurfaceHeightWithSeabed x, y Return both surface elevation and depth of sea bed at (x, y) . GetSurfaceType x, y Return the type of surface (e.g. \u201cwater\u201d, \u201casphalt\u201d) at (x, y) . GetTerrainConfig type Obtain configuration data for terrain subtypes (e.g. \u201cAirdromes\u201d). Init terrain_config, reason, date Initialize terrain data with a config table, reason code, and date. InitLight terrain_config, reason, date Initialize only the lighting component of the terrain system. Release \u2014 Clean up or unload terrain resources. convertLatLonToMeters lat, lon Convert geographic coordinates (latitude, longitude) into simulation meters. convertMGRStoMeters mgrs Convert an MGRS string into simulation meters. convertMetersToLatLon x, y Convert simulation\u2010space meters back to geographic coordinates. findPathOnRoads type, x1, y1, x2, y2 Find a path along \u201croads\u201d or \u201crailroads\u201d between two points. getBeacons \u2014 Retrieve a list of all beacon objects in the terrain. getClosestPointOnRoads type, x, y Find the nearest point on the specified network (\u201croads\u201d or \u201crailroads\u201d) to (x, y) . getClosestValidPoint type, x, y Find the nearest valid point of specified type (e.g. \u201cland\u201d) to (x, y) . getCrossParam \u2014 Retrieve cross\u2010parameter data (undocumented use case). getObjectPosition o Return the map position of a given scene object. getObjectsAtMapPoint mapX, mapY List all objects whose footprint overlaps the map point. getRadio roadnet Get radio frequencies for an airport identified by its road-network string. getRunwayHeading roadnet Return the magnetic heading of the primary runway for the given airport. getRunwayList roadnet Return runway metadata: course, edge names and coordinates. getStandList roadnet Return a list of aircraft stands with locations. getTechSkinByDate day, month Retrieve terrain \u201ctech skin\u201d (appearance) valid on the specified date. getTempratureRangeByDate day, month Return expected temperature range for the given day/month. getTerrainShpare \u2014 (Undocumented\u2014likely returns shape data for terrain meshes.) isVisible x1, alt1, y1, x2, alt2, y2 Raycast LOS check between two points at specified altitudes; returns true if unobstructed.","title":"Loading the module"},{"location":"Aircraft/Lua/Modules/Terrain/#create","text":"Signature: Terrain.Create() Description: [UNVERIFIED] Instantiate or reset the terrain subsystem. Call this if you need to clear any existing terrain data before re-initializing or running a new mission. Example: -- Start with a fresh terrain state Terrain.Create()","title":"Create"},{"location":"Aircraft/Lua/Modules/Terrain/#findnearestpoint","text":"Signature: px, py = Terrain.FindNearestPoint(x, y, range) Parameters: - x, y (number): world coordinates from which to search. - range (number): maximum search radius in meters. Returns: - px, py (number): coordinates of the nearest valid point (e.g. on a road). Description: [UNVERIFIED] Searches outward up to range meters and returns the closest point on the specified network. Useful for snapping units to roads or paths. Example: local playerX, playerY = 50000, 75000 local roadX, roadY = Terrain.FindNearestPoint(playerX, playerY, 2000) print(\"Snap to road at:\", roadX, roadY)","title":"FindNearestPoint"},{"location":"Aircraft/Lua/Modules/Terrain/#findoptimalpath","text":"Signature: pathTable = Terrain.FindOptimalPath(x1, y1, x2, y2) Parameters: - x1, y1 (number): start coordinates. - x2, y2 (number): end coordinates. Returns: - pathTable (table): an array of { x = ..., y = ... } waypoints along the optimal route (e.g. following roads). Description: [UNVERIFIED] Runs a graph search (A or Dijkstra) over the terrain network to produce a drivable path. Example: * local route = Terrain.FindOptimalPath(10000, 20000, 30000, 40000) for i, pt in ipairs(route) do print(i, pt.x, pt.y) end","title":"FindOptimalPath"},{"location":"Aircraft/Lua/Modules/Terrain/#getheight","text":"Signature: h = Terrain.GetHeight(x, y) Parameters: - x, y (number): query coordinates. Returns: - h (number): terrain elevation (meters above sea level). Description: Quickly sample the terrain elevation. Example: local elev = Terrain.GetHeight(45000, 82000) print(\"Elevation is\", elev, \"m\")","title":"GetHeight"},{"location":"Aircraft/Lua/Modules/Terrain/#getmgrscoordinates","text":"Signature: mgrs = Terrain.GetMGRScoordinates(x, y) Parameters: - x, y (number): world coordinates. Returns: - mgrs (string): MGRS grid reference (e.g. \"34TDF1234567890\"). Description: Convert from simulation-space meters to a human-readable MGRS coordinate. Example: local gridRef = Terrain.GetMGRScoordinates(345000, 789000) print(\"Grid:\", gridRef)","title":"GetMGRScoordinates"},{"location":"Aircraft/Lua/Modules/Terrain/#getseasons","text":"Signature: seasons = Terrain.GetSeasons() Returns: - seasons (table): list of available season identifiers (e.g. { \"winter\", \"summer\", ... }). Description: [UNVERIFIED] Fetch the set of seasons for which terrain textures and lighting are defined. Example: for _, season in ipairs(Terrain.GetSeasons()) do print(\"Available season:\", season) end","title":"GetSeasons"},{"location":"Aircraft/Lua/Modules/Terrain/#getsurfaceheightwithseabed","text":"Signature: surfaceH, depth = Terrain.GetSurfaceHeightWithSeabed(x, y) Parameters: - x, y (number): coordinates over water. Returns: - surfaceH (number): elevation of the water surface. - depth (number): depth from surface to seabed (positive number). Description: [UNVERIFIED] Useful for amphibious operations to know both water level and bottom depth. Example: local surf, d = Terrain.GetSurfaceHeightWithSeabed(20000, 15000) print(\"Water at\", surf, \"m, seabed\", d, \"m below\")","title":"GetSurfaceHeightWithSeabed"},{"location":"Aircraft/Lua/Modules/Terrain/#getsurfacetype","text":"Signature: stype = Terrain.GetSurfaceType(x, y) Parameters: - x, y (number): query location. Returns: - stype (string): surface material. \"land\" , \"sea\" , \"lake\" , \"river\" Description: Detect what kind of surface occupies a coordinate. Example: local mat = Terrain.GetSurfaceType(10200, 20500) print(\"Surface is\", mat)","title":"GetSurfaceType"},{"location":"Aircraft/Lua/Modules/Terrain/#getterrainconfig","text":"Signature: cfg = Terrain.GetTerrainConfig(type) Parameters: - type (string): e.g. \"Airdromes\". Returns: - cfg (table): configuration block for that terrain element (bounds, default camera, etc.). Description: [UNVERIFIED] Inspect built-in metadata for things like airfield layout. Example: local airCfg = Terrain.GetTerrainConfig(\"Airdromes\") print(\"Airfield NE bound:\", airCfg.NE_bound.x, airCfg.NE_bound.y)","title":"GetTerrainConfig"},{"location":"Aircraft/Lua/Modules/Terrain/#init","text":"Signature: Terrain.Init(terrain_config, reason, date) Parameters: - terrain_config (table) - reason (any) - date (table): { year=\u2026, month=\u2026, day=\u2026 }. Description: [UNVERIFIED] none. Example: local cfg = Terrain.GetTerrainConfig(\"Airdromes\") Terrain.Init(cfg, \"mission_start\", { year=2025, month=7, day=7 })","title":"Init"},{"location":"Aircraft/Lua/Modules/Terrain/#initlight","text":"Signature: Terrain.InitLight(terrain_config, reason, date) Parameters: - terrain_config (table) - reason (any) - date (table): { year=\u2026, month=\u2026, day=\u2026 }. Description: [UNVERIFIED] none. Example: Terrain.InitLight(airCfg, \"time_change\", { year=2025, month=12, day=1 })","title":"InitLight"},{"location":"Aircraft/Lua/Modules/Terrain/#release","text":"Signature: Terrain.Release() Description: [UNVERIFIED] none. Example: Terrain.Release()","title":"Release"},{"location":"Aircraft/Lua/Modules/Terrain/#convertlatlontometers","text":"Signature: x, y = Terrain.convertLatLonToMeters(lat, lon) Parameters: - lat, lon (number): geographic coordinates in degrees. Returns: - x, y (number): simulation meters. Description: Project WGS84 lat/lon into the simulator\u2019s local flat coordinate system. Example: local mx, my = Terrain.convertLatLonToMeters(34.0522, -118.2437)","title":"convertLatLonToMeters"},{"location":"Aircraft/Lua/Modules/Terrain/#convertmgrstometers","text":"Signature: x, y = Terrain.convertMGRStoMeters(mgrs) Parameters: - mgrs (string): MGRS reference. Returns: - x, y (number): simulation meters. Description: Inverse of GetMGRScoordinates. Example: local ux, uy = Terrain.convertMGRStoMeters(\"33TUN1234567890\")","title":"convertMGRStoMeters"},{"location":"Aircraft/Lua/Modules/Terrain/#convertmeterstolatlon","text":"Signature: lat, lon = Terrain.convertMetersToLatLon(x, y) Parameters: - x, y (number): simulation coordinates. Returns: - lat, lon (number): geographic degrees. Description: Inverse map projection back to WGS84. Example: local \u03c6, \u03bb = Terrain.convertMetersToLatLon(400000, 5000000)","title":"convertMetersToLatLon"},{"location":"Aircraft/Lua/Modules/Terrain/#findpathonroads","text":"Signature: pathTable = Terrain.findPathOnRoads(type, x1, y1, x2, y2) Parameters: - type (string): \"roads\" or \"railroads\". - x1, y1 , x2, y2 (number): endpoints. Returns: - pathTable (table): waypoint array. Description: [UNVERIFIED] none. Example: local trainRoute = Terrain.findPathOnRoads(\"railroads\", 1000, 2000, 8000, 9000)","title":"findPathOnRoads"},{"location":"Aircraft/Lua/Modules/Terrain/#getbeacons","text":"Signature: beacons = Terrain.getBeacons() Returns: - beacons (table): list of beacon objects, each with position and frequency. Description: Enumerate nav-beacons placed in the terrain. Example: for _, b in ipairs(Terrain.getBeacons()) do print(\"Beacon\", b.id, \"at\", b.x, b.y, \"freq\", b.freq) end","title":"getBeacons"},{"location":"Aircraft/Lua/Modules/Terrain/#getclosestpointonroads","text":"Signature: px, py = Terrain.getClosestPointOnRoads(type, x, y) Parameters: - type (string): \"roads\" or \"railroads\". - x, y (number): query point. Returns: - px, py (number): on-network coordinates. Description: [UNVERIFIED] none. Example: local rx, ry = Terrain.getClosestPointOnRoads(\"roads\", 12345, 67890)","title":"getClosestPointOnRoads"},{"location":"Aircraft/Lua/Modules/Terrain/#getclosestvalidpoint","text":"Signature: px, py = Terrain.getClosestValidPoint(type, x, y) Parameters: - type (string): e.g. \"land\". - x, y (number): input coords. Returns: - px, py (number): nearest valid location of that type. Description: [UNVERIFIED] none. Example: local fx, fy = Terrain.getClosestValidPoint(\"land\", helicopterX, helicopterY)","title":"getClosestValidPoint"},{"location":"Aircraft/Lua/Modules/Terrain/#getcrossparam","text":"Signature: param = Terrain.getCrossParam() Returns: - param (any): undocumented cross-parameter data. Description: Only for advanced use\u2014internal terrain tuning. Example: local cp = Terrain.getCrossParam() print(\"Cross param:\", cp)","title":"getCrossParam"},{"location":"Aircraft/Lua/Modules/Terrain/#getobjectposition","text":"Signature: ox, oy = Terrain.getObjectPosition(obj) Parameters: - obj (Object): engine object reference. Returns: - ox, oy (number): its map position. Description: [UNVERIFIED] none. Example: local x, y = Terrain.getObjectPosition(myVehicle)","title":"getObjectPosition"},{"location":"Aircraft/Lua/Modules/Terrain/#getobjectsatmappoint","text":"Signature: list = Terrain.getObjectsAtMapPoint(mapX, mapY) Parameters: - mapX, mapY (number): query location. Returns: - list (table): all objects overlapping that point. Description: [UNVERIFIED] none. Example: local objs = Terrain.getObjectsAtMapPoint(5000, 6000) print(\"Found\", #objs, \"objects\")","title":"getObjectsAtMapPoint"},{"location":"Aircraft/Lua/Modules/Terrain/#getradio","text":"Signature: radios = Terrain.getRadio(roadnet) Parameters: - roadnet (string): airport identifier. Returns: - radios (table): frequency settings for that airfield\u2019s comms. Description: Obtain tower/ground/approach frequencies. Example: local freqs = Terrain.getRadio(\"KSFO_roadnet\") print(freqs.tower, freqs.ground)","title":"getRadio"},{"location":"Aircraft/Lua/Modules/Terrain/#getrunwayheading","text":"Signature: hdg = Terrain.getRunwayHeading(roadnet) Parameters: - roadnet (string): airport ID. Returns: - hdg (number): magnetic heading of the primary runway. Description: Useful for HUD wind-correction and runway-alignment cues. Example: local rHdg = Terrain.getRunwayHeading(\"RJTT_roadnet\") print(\"Runway heading:\", rHdg)","title":"getRunwayHeading"},{"location":"Aircraft/Lua/Modules/Terrain/#getrunwaylist","text":"Signature: runways = Terrain.getRunwayList(roadnet) Parameters: - roadnet (string): airport ID. Returns: - runways (table): each entry contains: - course (number): runway heading - edge1name (string), edge1x , edge1y (number): name and coordinates of one end - edge2name (string), edge2x , edge2y (number): name and coordinates of the opposite end Description: Enumerate all runways at the specified airfield, returning their endpoints and headings. Example: for _, rw in ipairs(Terrain.getRunwayList(\"EGLL_roadnet\")) do print(\"RW\", rw.edge1name, \"to\", rw.edge2name, \"heading\", rw.course) end","title":"getRunwayList"},{"location":"Aircraft/Lua/Modules/Terrain/#getstandlist","text":"Signature: stands = Terrain.getStandList(roadnet) Parameters: - roadnet (string): airport ID. Returns: - stands (table): list of parking stands with coordinates. Description: Get gate and parking-spot positions. Example: local gates = Terrain.getStandList(\"KDEN_roadnet\") print(\"First stand at\", gates[1].x, gates[1].y)","title":"getStandList"},{"location":"Aircraft/Lua/Modules/Terrain/#gettechskinbydate","text":"Signature: skin = Terrain.getTechSkinByDate(day, month) Parameters: - day, month (number): calendar date. Returns: - skin (any): texture/skin identifier valid on that day. Description: Swap in historical or seasonal terrain skins. Example: local tex = Terrain.getTechSkinByDate(15, 8) -- August 15","title":"getTechSkinByDate"},{"location":"Aircraft/Lua/Modules/Terrain/#gettempraturerangebydate","text":"Signature: minT, maxT = Terrain.getTempratureRangeByDate(day, month) Parameters: - day, month (number): date. Returns: - minT, maxT (number): expected daily temperature extremes (\u00b0C). Description: Drive weather models or engine performance tables. Example: local lo, hi = Terrain.getTempratureRangeByDate(1, 12) print(\"Dec 1 temps:\", lo, \"to\", hi)","title":"getTempratureRangeByDate"},{"location":"Aircraft/Lua/Modules/Terrain/#getterrainshpare","text":"Signature: shape = Terrain.getTerrainShpare() Returns: - shape (any): internal terrain mesh data. Description: Undocumented; likely used for low-level mesh queries. Example: local mesh = Terrain.getTerrainShpare()","title":"getTerrainShpare"},{"location":"Aircraft/Lua/Modules/Terrain/#isvisible","text":"Signature: visible = Terrain.isVisible(x1, alt1, y1, x2, alt2, y2) Parameters: - x1, y1, alt1 (number): start point and altitude. - x2, y2, alt2 (number): end point and altitude. Returns: - visible (boolean): true if line-of-sight is unobstructed. Description: Perform a raycast through the terrain to check LOS. Example: if Terrain.isVisible(10000, 50, 20000, 15000, 100, 25000) then print(\"Target in sight!\") end","title":"isVisible"},{"location":"EDM-Export/Animations/","text":"","title":"Animations"},{"location":"EDM-Export/Lights/","text":"","title":"Lights"},{"location":"EDM-Export/Mesh/","text":"Exporting A Mesh to DCS Preparing the Material To export your first mesh into the .edm format, start with a blank blender cube, as seen below. Switch to the shading tab, if the cube does not have a material by default, create one. Next, We will need to configure the material nodes with the EDM Materials. First, remove the default Principled BSDF node, but leave the Material Output Node. Next, Either by pressing SHIFT + A or by clicking Add in the Node Editor, navigate to EDM Materials > Material - Default. With the EDM_Default_Material Node in place, connect the BSDF point of the EDM material to the Surface point of the Material Output . An example of this can be seen below. Exporting to EDM We're now ready to export our cube to an .edm file! Navigate to File > Export > Eagle Dynamics Model (.edm) Then Name and save your file in your desired location by clicking export to EDM Opening in ModelViewer Open ModelViewer, and go to File > Load Model or CTRL + N Navigate to your edm file, select it, then press load You should now see a white cube, very similar to the image below. Multiple Meshes/Materials Any object with an EDM material assigned will export to DCS, if you add a second mesh, assign either your existing EDM material, or add a new one, and it will export to DCS Multiple Materials per Mesh The ED Exporter supports multiple materials per mesh, there is nothing special needed to setup, just all materials in the mesh need to be configured to be EDM materials. Adding a Texture Back in the node editor, go to Add > Texture > Image Texture Then connect the Color and Alpha points on the image texture to the Base Color and Base Alpha points of the EDM Material Select your image in the Image Texture Node. Your project should look similar to the image below. repeat the steps in Exporting to EDM Then close and re-poen modelviewer, and reload your EDM file Warning Textures will not appear in ModelViewer unless they are properly mounted. A typical working directory structure is: (if this doesnt work, send Hayds_93 a DM on discord and I'll update it) Project/ \u251c\u2500 Shapes/ \u2502 \u2514\u2500 cube.edm \u2514\u2500 Textures/ \u2514\u2500 cube.png RoughMets and Normals Adding RoughMets and Normals is simple. Add two more Image Texture nodes. Connect the color point of one to RoughMet (Non-Color) and the color point on the other to Normal (Non-Color) The result should look like: Export your model, restart modelviewer, then load in your new model. Note Setting the Color Space fields of the RoughMet and Normal nodes to Non-Color will make blender render the textures properly. However not setting this will not affect the resulting edm export, so can be safely ignored Blender Project Structre While not necessary, you can bake all LODs (Level of Detail) and the collision model into one .edm file. Starting with an EXPORT Collection, then having sub-collections for collision, and LOD_{LOD_NUMBER}_{LOD_DISTANCE_IN_M} (eg. LOD_0_50 ). Each sub collection should have a copy of the mesh, and they should not share animations or parents. Duplicate the animation empties, then re-apply the actions to the new empties.","title":"Mesh"},{"location":"EDM-Export/Mesh/#exporting-a-mesh-to-dcs","text":"","title":"Exporting A Mesh to DCS"},{"location":"EDM-Export/Mesh/#preparing-the-material","text":"To export your first mesh into the .edm format, start with a blank blender cube, as seen below. Switch to the shading tab, if the cube does not have a material by default, create one. Next, We will need to configure the material nodes with the EDM Materials. First, remove the default Principled BSDF node, but leave the Material Output Node. Next, Either by pressing SHIFT + A or by clicking Add in the Node Editor, navigate to EDM Materials > Material - Default. With the EDM_Default_Material Node in place, connect the BSDF point of the EDM material to the Surface point of the Material Output . An example of this can be seen below.","title":"Preparing the Material"},{"location":"EDM-Export/Mesh/#exporting-to-edm","text":"We're now ready to export our cube to an .edm file! Navigate to File > Export > Eagle Dynamics Model (.edm) Then Name and save your file in your desired location by clicking export to EDM","title":"Exporting to EDM"},{"location":"EDM-Export/Mesh/#opening-in-modelviewer","text":"Open ModelViewer, and go to File > Load Model or CTRL + N Navigate to your edm file, select it, then press load You should now see a white cube, very similar to the image below.","title":"Opening in ModelViewer"},{"location":"EDM-Export/Mesh/#multiple-meshesmaterials","text":"Any object with an EDM material assigned will export to DCS, if you add a second mesh, assign either your existing EDM material, or add a new one, and it will export to DCS","title":"Multiple Meshes/Materials"},{"location":"EDM-Export/Mesh/#multiple-materials-per-mesh","text":"The ED Exporter supports multiple materials per mesh, there is nothing special needed to setup, just all materials in the mesh need to be configured to be EDM materials.","title":"Multiple Materials per Mesh"},{"location":"EDM-Export/Mesh/#adding-a-texture","text":"Back in the node editor, go to Add > Texture > Image Texture Then connect the Color and Alpha points on the image texture to the Base Color and Base Alpha points of the EDM Material Select your image in the Image Texture Node. Your project should look similar to the image below. repeat the steps in Exporting to EDM Then close and re-poen modelviewer, and reload your EDM file Warning Textures will not appear in ModelViewer unless they are properly mounted. A typical working directory structure is: (if this doesnt work, send Hayds_93 a DM on discord and I'll update it) Project/ \u251c\u2500 Shapes/ \u2502 \u2514\u2500 cube.edm \u2514\u2500 Textures/ \u2514\u2500 cube.png","title":"Adding a Texture"},{"location":"EDM-Export/Mesh/#roughmets-and-normals","text":"Adding RoughMets and Normals is simple. Add two more Image Texture nodes. Connect the color point of one to RoughMet (Non-Color) and the color point on the other to Normal (Non-Color) The result should look like: Export your model, restart modelviewer, then load in your new model. Note Setting the Color Space fields of the RoughMet and Normal nodes to Non-Color will make blender render the textures properly. However not setting this will not affect the resulting edm export, so can be safely ignored","title":"RoughMets and Normals"},{"location":"EDM-Export/Mesh/#blender-project-structre","text":"While not necessary, you can bake all LODs (Level of Detail) and the collision model into one .edm file. Starting with an EXPORT Collection, then having sub-collections for collision, and LOD_{LOD_NUMBER}_{LOD_DISTANCE_IN_M} (eg. LOD_0_50 ). Each sub collection should have a copy of the mesh, and they should not share animations or parents. Duplicate the animation empties, then re-apply the actions to the new empties.","title":"Blender Project Structre"},{"location":"EDM-Export/Overview/","text":"Eagle Dynamics DCS Blender Export Plugin Intro I've compiled this documentation since the docs included with the plugin in the manual folder are out of date, and complete, with poor formatting. However the template EDM files are very useful. Note There are no changelogs or any public info about this other than what is included in the downloaded .zip Warning This guide assumes general blender knowledge, including materials, animation. Installation The Blender plugin can be downloaded from here Install the .zip file into blender in edit > preferences. Note At time of writing, the plugin has not been updated since March 11 2025. The plugin is still work in progress, and some features will not work. Help me Feel free to create a pull request and contribute your findings","title":"Overview"},{"location":"EDM-Export/Overview/#eagle-dynamics-dcs-blender-export-plugin","text":"","title":"Eagle Dynamics DCS Blender Export Plugin"},{"location":"EDM-Export/Overview/#intro","text":"I've compiled this documentation since the docs included with the plugin in the manual folder are out of date, and complete, with poor formatting. However the template EDM files are very useful. Note There are no changelogs or any public info about this other than what is included in the downloaded .zip Warning This guide assumes general blender knowledge, including materials, animation.","title":"Intro"},{"location":"EDM-Export/Overview/#installation","text":"The Blender plugin can be downloaded from here Install the .zip file into blender in edit > preferences. Note At time of writing, the plugin has not been updated since March 11 2025. The plugin is still work in progress, and some features will not work.","title":"Installation"},{"location":"EDM-Export/Overview/#help-me","text":"Feel free to create a pull request and contribute your findings","title":"Help me"}]}